ANSI-C/cC++ Compiler for HC08 V-5.0.32 Build 9279, Oct  7 2009

    1:  /**
    2:    ******************************************************************************
    3:    * proj    firmware startup project
    4:    * file    CAL.c
    5:    * ver     1.0
    6:    * brief   This is a CAL file for all C files.
    7:    ------------------------------------------------------------------------------
    8:    * 2012.02 created by taoyu@bakai.com
    9:    */ 
   10:  
   11:  /* File Id -------------------------------------------------------------------*/
   12:  #define _CAL_C_  0x78
   13:  #define FILE_No _CAL_C_
   14:  
   15:  /* Includes ------------------------------------------------------------------*/
   16:  #include  "cal.h"  /* mandotary */
   17:  #include  "sc.h"
   18:  #include  "vs.h"
   19:  #include  "ts.h"
   20:  
   21:  /* Private Macros & Defines --------------------------------------------------*/
   22:  
   23:  /* Private typedefs ----------------------------------------------------------*/
   24:  
   25:  /* Private consts ------------------------------------------------------------*/
   26:  
   27:  /* Private variables ---------------------------------------------------------*/
   28:  
   29:  /* Private function prototypes -----------------------------------------------*/
   30:  
   31:  /* Global consts -------------------------------------------------------------*/
   32:  
   33:  /* Global variables ----------------------------------------------------------*/
   34:  
   35:  cal_t cal;
   36:  
   37:  /* Functions -----------------------------------------------------------------*/
   38:  
   39:  /**
   40:    * bref    CAL function
   41:    * param   none
   42:    * retval  none
   43:    */
   44:  
   45:  void cal_init(void)
   46:  {

Function: cal_init
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application\cal.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\cal.c.o" -WmsgSd1106

   47:  }
  0000 81       [6]             RTS   
   48:  
   49:  static void cal_clear(void)
   50:  {

Function: cal_clear
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application\cal.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\cal.c.o" -WmsgSd1106

  0000 8b       [2]             PSHH  
   51:    unsigned char i;
   52:    
   53:    //  volt
   54:    for(i=0;i<12*LTC6802_MAX;i++) cal.volt[i] = 0x8000;
  0001 95       [2]             TSX   
  0002 7f       [4]             CLR   ,X
  0003          L3:     
  0003 fe       [3]             LDX   ,X
  0004 58       [1]             LSLX  
  0005 4f       [1]             CLRA  
  0006 49       [1]             ROLA  
  0007 87       [2]             PSHA  
  0008 8a       [3]             PULH  
  0009 4f       [1]             CLRA  
  000a d70001   [4]             STA   @cal:1,X
  000d a680     [2]             LDA   #-128
  000f d70000   [4]             STA   @cal,X
  0012 95       [2]             TSX   
  0013 7c       [4]             INC   ,X
  0014 f6       [3]             LDA   ,X
  0015 a118     [2]             CMP   #24
  0017 25ea     [3]             BCS   L3 ;abs = 0003
   55:    cal.vmax = 0x8000;
  0019 458000   [3]             LDHX  #-32768
  001c 960030   [5]             STHX  cal:48
   56:    cal.vMaxLow = 0x8000;
  001f 960032   [5]             STHX  cal:50
   57:    cal.vMaxHigh = 0x8000;
  0022 960034   [5]             STHX  cal:52
   58:    cal.vmin = 0x8000;
  0025 960036   [5]             STHX  cal:54
   59:    cal.vMinLow = 0x8000;
  0028 960038   [5]             STHX  cal:56
   60:    cal.vMinHigh = 0x8000;
  002b 96003a   [5]             STHX  cal:58
   61:    cal.vsum = 0x80000000;
  002e 8c       [1]             CLRH  
  002f 960044   [5]             STHX  cal:68
  0032 458000   [3]             LDHX  #-32768
  0035 960042   [5]             STHX  cal:66
   62:    cal.vSumLow = 0x80000000;
  0038 8c       [1]             CLRH  
  0039 960048   [5]             STHX  cal:72
  003c 458000   [3]             LDHX  #-32768
  003f 960046   [5]             STHX  cal:70
   63:    cal.vSumHigh = 0x80000000;
  0042 8c       [1]             CLRH  
  0043 96004c   [5]             STHX  cal:76
  0046 458000   [3]             LDHX  #-32768
  0049 96004a   [5]             STHX  cal:74
   64:    cal.vave = 0x8000;        
  004c 96003c   [5]             STHX  cal:60
   65:    cal.vAveLow = 0x8000;
  004f 96003e   [5]             STHX  cal:62
   66:    cal.vAveHigh = 0x8000;
  0052 960040   [5]             STHX  cal:64
   67:    cal.ivmax = 0x80;
  0055 8b       [2]             PSHH  
  0056 86       [3]             PULA  
  0057 45004e   [3]             LDHX  @cal:78
  005a f7       [2]             STA   ,X
   68:    cal.ivMaxLow = 0x80;
  005b e701     [3]             STA   1,X
   69:    cal.ivMaxHigh = 0x80;
  005d e702     [3]             STA   2,X
   70:    cal.ivmin = 0x80;
  005f e703     [3]             STA   3,X
   71:    cal.ivMinLow = 0x80;
  0061 e704     [3]             STA   4,X
   72:    cal.ivMinHigh = 0x80;
  0063 e705     [3]             STA   5,X
   73:    
   74:    //  temp
   75:    for(i=0;i<24;i++) cal.temp[i] = 0x8000;
  0065 95       [2]             TSX   
  0066 7f       [4]             CLR   ,X
  0067          L67:    
  0067 fe       [3]             LDX   ,X
  0068 58       [1]             LSLX  
  0069 4f       [1]             CLRA  
  006a 49       [1]             ROLA  
  006b 87       [2]             PSHA  
  006c 8a       [3]             PULH  
  006d 4f       [1]             CLRA  
  006e d70055   [4]             STA   @cal:85,X
  0071 a680     [2]             LDA   #-128
  0073 d70054   [4]             STA   @cal:84,X
  0076 95       [2]             TSX   
  0077 7c       [4]             INC   ,X
  0078 f6       [3]             LDA   ,X
  0079 a118     [2]             CMP   #24
  007b 25ea     [3]             BCS   L67 ;abs = 0067
   76:    cal.tmax = 0x8000;
  007d 458000   [3]             LDHX  #-32768
  0080 960084   [5]             STHX  cal:132
   77:    cal.tMaxLow = 0x8000;
  0083 960086   [5]             STHX  cal:134
   78:    cal.tMaxHigh = 0x8000;
  0086 960088   [5]             STHX  cal:136
   79:    cal.tmin = 0x8000;
  0089 96008a   [5]             STHX  cal:138
   80:    cal.tMinLow = 0x8000;
  008c 96008c   [5]             STHX  cal:140
   81:    cal.tMinHigh = 0x8000;
  008f 96008e   [5]             STHX  cal:142
   82:    cal.tsum = 0x80000000;
  0092 8c       [1]             CLRH  
  0093 960098   [5]             STHX  cal:152
  0096 458000   [3]             LDHX  #-32768
  0099 960096   [5]             STHX  cal:150
   83:    cal.tSumLow = 0x80000000;
  009c 8c       [1]             CLRH  
  009d 96009c   [5]             STHX  cal:156
  00a0 458000   [3]             LDHX  #-32768
  00a3 96009a   [5]             STHX  cal:154
   84:    cal.tSumHigh = 0x80000000;
  00a6 8c       [1]             CLRH  
  00a7 9600a0   [5]             STHX  cal:160
  00aa 458000   [3]             LDHX  #-32768
  00ad 96009e   [5]             STHX  cal:158
   85:    cal.tave = 0x8000;
  00b0 960090   [5]             STHX  cal:144
   86:    cal.tAveLow = 0x8000;
  00b3 960092   [5]             STHX  cal:146
   87:    cal.tAveHigh = 0x8000;
  00b6 960094   [5]             STHX  cal:148
   88:    cal.itmax = 0x80;
  00b9 8b       [2]             PSHH  
  00ba 86       [3]             PULA  
  00bb c700a2   [4]             STA   cal:162
   89:    cal.itMaxLow = 0x80;
  00be c700a3   [4]             STA   cal:163
   90:    cal.itMaxHigh = 0x80;
  00c1 c700a4   [4]             STA   cal:164
   91:    cal.itmin = 0x80;
  00c4 c700a5   [4]             STA   cal:165
   92:    cal.itMinLow = 0x80;
  00c7 c700a6   [4]             STA   cal:166
   93:    cal.itMinHigh = 0x80;
  00ca c700a7   [4]             STA   cal:167
   94:  
   95:    //  other temps
   96:    cal.bal_temp = 0x8000;
  00cd 87       [2]             PSHA  
  00ce 8a       [3]             PULH  
  00cf 9600d8   [5]             STHX  cal:216
   97:    cal.main_temp = 0x8000;
  00d2 87       [2]             PSHA  
  00d3 8a       [3]             PULH  
  00d4 9600da   [5]             STHX  cal:218
   98:    
   99:  }
  00d7 8a       [3]             PULH  
  00d8 81       [6]             RTS   
  100:  
  101:  static void cal_volt(void)
  102:  {

Function: cal_volt
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application\cal.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\cal.c.o" -WmsgSd1106

  0000 a7f2     [2]             AIS   #-14
  103:    unsigned char i;
  104:    unsigned char cnt;
  105:  
  106:    //  get voltages
  107:    for(i=0;i<gv_sSC.sCal.bVoltCount;i++){
  0002 95       [2]             TSX   
  0003 7f       [4]             CLR   ,X
  0004 cc0090   [4]             JMP   L90 ;abs = 0090
  0007          L7:     
  108:      unsigned char si;
  109:      unsigned char ii;
  110:      signed short  volt;
  111:  
  112:      ii = gv_sSC.sCal.baVoltMap[i];
  0007 fe       [3]             LDX   ,X
  0008 8c       [1]             CLRH  
  0009 d6008d   [4]             LDA   @gv_sSC:141,X
  113:      si = ii>>4;
  000c 87       [2]             PSHA  
  000d 62       [1]             NSA   
  000e a40f     [2]             AND   #15
  0010 95       [2]             TSX   
  0011 e70e     [3]             STA   14,X
  114:      ii &= 0x0f;
  0013 86       [3]             PULA  
  0014 a40f     [2]             AND   #15
  0016 e70d     [3]             STA   13,X
  115:  
  116:      if( ii>=gv_sSC.sCal.bVoltCount ) continue;
  0018 c1008b   [4]             CMP   gv_sSC:139
  001b 2471     [3]             BCC   L8E ;abs = 008e
  117:      
  118:      if( si<LTC6802_MAX ){
  001d e60e     [3]             LDA   14,X
  001f a102     [2]             CMP   #2
  0021 2427     [3]             BCC   L4A ;abs = 004a
  119:        volt = vs_data[si].volt[ii];
  0023 62       [1]             NSA   
  0024 a4f0     [2]             AND   #-16
  0026 48       [1]             LSLA  
  0027 ee0d     [3]             LDX   13,X
  0029 58       [1]             LSLX  
  002a 87       [2]             PSHA  
  002b 4f       [1]             CLRA  
  002c 49       [1]             ROLA  
  002d 87       [2]             PSHA  
  002e 9ee602   [4]             LDA   2,SP
  0031 9eef02   [4]             STX   2,SP
  0034 95       [2]             TSX   
  0035 eb01     [3]             ADD   1,X
  0037 e701     [3]             STA   1,X
  0039 4f       [1]             CLRA  
  003a f9       [3]             ADC   ,X
  003b 87       [2]             PSHA  
  003c ee01     [3]             LDX   1,X
  003e 8a       [3]             PULH  
  003f 9ebe0000 [6]             LDHX  @vs_data,X
  0043 9eff06   [5]             STHX  6,SP
  120:      }else{
  0046 a702     [2]             AIS   #2
  0048 200e     [3]             BRA   L58 ;abs = 0058
  004a          L4A:    
  121:        volt = gv_sSC.sCal.haVoltRef[ii];
  004a ee0d     [3]             LDX   13,X
  004c 58       [1]             LSLX  
  004d 4f       [1]             CLRA  
  004e 49       [1]             ROLA  
  004f 87       [2]             PSHA  
  0050 8a       [3]             PULH  
  0051 9ebe0073 [6]             LDHX  @gv_sSC:115,X
  0055 9eff04   [5]             STHX  4,SP
  0058          L58:    
  122:      }
  123:  
  124:      volt += gv_sSC.sCal.sbaVoltAdj[i];
  0058 95       [2]             TSX   
  0059 fe       [3]             LDX   ,X
  005a 8c       [1]             CLRH  
  005b d600a5   [4]             LDA   @gv_sSC:165,X
  005e 87       [2]             PSHA  
  005f 48       [1]             LSLA  
  0060 4f       [1]             CLRA  
  0061 a200     [2]             SBC   #0
  0063 87       [2]             PSHA  
  0064 9ee602   [4]             LDA   2,SP
  0067 9eeb07   [4]             ADD   7,SP
  006a 9ee707   [4]             STA   7,SP
  006d 86       [3]             PULA  
  006e 9ee905   [4]             ADC   5,SP
  0071 9ee705   [4]             STA   5,SP
  125:      
  126:      if( volt<0 ) volt = 0;
  0074 8a       [3]             PULH  
  0075 9006     [3]             BGE   L7D ;abs = 007d
  0077 9e6f05   [6]             CLR   5,SP
  007a 9e6f04   [6]             CLR   4,SP
  007d          L7D:    
  127:      
  128:      cal.volt[i] = volt;
  007d 58       [1]             LSLX  
  007e 4f       [1]             CLRA  
  007f 49       [1]             ROLA  
  0080 87       [2]             PSHA  
  0081 9ee606   [4]             LDA   6,SP
  0084 8a       [3]             PULH  
  0085 d70001   [4]             STA   @cal:1,X
  0088 9ee604   [4]             LDA   4,SP
  008b d70000   [4]             STA   @cal,X
  008e          L8E:    
  008e 95       [2]             TSX   
  008f 7c       [4]             INC   ,X
  0090          L90:    
  0090 c6008b   [4]             LDA   gv_sSC:139
  0093 f1       [3]             CMP   ,X
  0094 2303     [3]             BLS   L99 ;abs = 0099
  0096 cc0007   [4]             JMP   L7 ;abs = 0007
  0099          L99:    
  129:  
  130:    }
  131:  
  132:    //  vmax, vmin, vsum
  133:    cnt = 0;
  0099 6f09     [5]             CLR   9,X
  134:    //if(gv_sSC.sVs.bLtc6802Count == 2)
  135:    for(i=0;i<gv_sSC.sCal.bVoltCount;i++){
  009b 7f       [4]             CLR   ,X
  009c cc0186   [4]             JMP   L186 ;abs = 0186
  009f          L9F:    
  136:      unsigned short volt;
  137:      volt = cal.volt[i];
  009f fe       [3]             LDX   ,X
  00a0 58       [1]             LSLX  
  00a1 4f       [1]             CLRA  
  00a2 49       [1]             ROLA  
  00a3 87       [2]             PSHA  
  00a4 8a       [3]             PULH  
  00a5 9ebe0000 [6]             LDHX  @cal,X
  00a9 9eff02   [5]             STHX  2,SP
  138:  
  139:      //  do if valid
  140:      if( (volt&0x8000)==0 ){
  00ac 95       [2]             TSX   
  00ad e601     [3]             LDA   1,X
  00af 2a03     [3]             BPL   LB4 ;abs = 00b4
  00b1 cc0185   [4]             JMP   L185 ;abs = 0185
  00b4          LB4:    
  141:  
  142:        //  max
  143:        if( (cal.vmax&0x8000) || cal.vmax<volt ){
  00b4 c60030   [4]             LDA   cal:48
  00b7 2b08     [3]             BMI   LC1 ;abs = 00c1
  00b9 320030   [5]             LDHX  cal:48
  00bc 9ef302   [6]             CPHX  2,SP
  00bf 241f     [3]             BCC   LE0 ;abs = 00e0
  00c1          LC1:    
  144:          cal.vmax = volt;
  00c1 9efe02   [5]             LDHX  2,SP
  00c4 960030   [5]             STHX  cal:48
  145:          cal.ivmax = i;
  00c7 9ee601   [4]             LDA   1,SP
  00ca c7004e   [4]             STA   cal:78
  146:          if(i < gv_sSC.sCal.bCellCount) 
  00cd c1008c   [4]             CMP   gv_sSC:140
  00d0 2408     [3]             BCC   LDA ;abs = 00da
  147:          {
  148:            cal.vMaxLow = volt;
  00d2 960032   [5]             STHX  cal:50
  149:            cal.ivMaxLow = i;
  00d5 c7004f   [4]             STA   cal:79
  150:          } 
  00d8 2006     [3]             BRA   LE0 ;abs = 00e0
  00da          LDA:    
  151:          else 
  152:          {
  153:            cal.vMaxHigh = volt;
  00da 960034   [5]             STHX  cal:52
  154:            cal.ivMaxHigh = i;
  00dd c70050   [4]             STA   cal:80
  00e0          LE0:    
  155:          }
  156:        }
  157:  
  158:        //  min
  159:        if( (cal.vmin&0x8000) || cal.vmin>volt ){
  00e0 c60036   [4]             LDA   cal:54
  00e3 2b08     [3]             BMI   LED ;abs = 00ed
  00e5 320036   [5]             LDHX  cal:54
  00e8 9ef302   [6]             CPHX  2,SP
  00eb 231f     [3]             BLS   L10C ;abs = 010c
  00ed          LED:    
  160:          cal.vmin = volt;
  00ed 9efe02   [5]             LDHX  2,SP
  00f0 960036   [5]             STHX  cal:54
  161:          cal.ivmin = i;
  00f3 9ee601   [4]             LDA   1,SP
  00f6 c70051   [4]             STA   cal:81
  162:          if(i < gv_sSC.sCal.bCellCount) 
  00f9 c1008c   [4]             CMP   gv_sSC:140
  00fc 2408     [3]             BCC   L106 ;abs = 0106
  163:          {
  164:            cal.vMinLow = volt;
  00fe 960038   [5]             STHX  cal:56
  165:            cal.ivMinLow = i;
  0101 c70052   [4]             STA   cal:82
  166:          } 
  0104 2006     [3]             BRA   L10C ;abs = 010c
  0106          L106:   
  167:          else 
  168:          {
  169:            cal.vMinHigh = volt;
  0106 96003a   [5]             STHX  cal:58
  170:            cal.ivMinHigh = i;
  0109 c70053   [4]             STA   cal:83
  010c          L10C:   
  171:          }
  172:        }
  173:  
  174:        //  sum
  175:        if( cal.vsum&0x80000000 ){
  010c c60042   [4]             LDA   cal:66
  010f 2a2d     [3]             BPL   L13E ;abs = 013e
  176:          cal.vsum = volt;
  0111 9efe02   [5]             LDHX  2,SP
  0114 960044   [5]             STHX  cal:68
  0117 8c       [1]             CLRH  
  0118 5f       [1]             CLRX  
  0119 960042   [5]             STHX  cal:66
  177:          cal.vSumLow = volt;
  011c 95       [2]             TSX   
  011d e602     [3]             LDA   2,X
  011f ee01     [3]             LDX   1,X
  0121 89       [2]             PSHX  
  0122 8a       [3]             PULH  
  0123 97       [1]             TAX   
  0124 960048   [5]             STHX  cal:72
  0127 8c       [1]             CLRH  
  0128 5f       [1]             CLRX  
  0129 960046   [5]             STHX  cal:70
  178:          cal.vSumHigh = volt;
  012c 95       [2]             TSX   
  012d e602     [3]             LDA   2,X
  012f ee01     [3]             LDX   1,X
  0131 89       [2]             PSHX  
  0132 8a       [3]             PULH  
  0133 97       [1]             TAX   
  0134 96004c   [5]             STHX  cal:76
  0137 8c       [1]             CLRH  
  0138 5f       [1]             CLRX  
  0139 96004a   [5]             STHX  cal:74
  179:        }else{
  013c 2044     [3]             BRA   L182 ;abs = 0182
  013e          L13E:   
  180:          cal.vsum += volt;
  013e 9efe02   [5]             LDHX  2,SP
  0141 4f       [1]             CLRA  
  0142 89       [2]             PSHX  
  0143 8b       [2]             PSHH  
  0144 87       [2]             PSHA  
  0145 87       [2]             PSHA  
  0146 95       [2]             TSX   
  0147 89       [2]             PSHX  
  0148 8b       [2]             PSHH  
  0149 450042   [3]             LDHX  @cal:66
  014c cd0000   [6]             JSR   _LADD
  014f cd0000   [6]             JSR   _POP32
  181:          if(i < gv_sSC.sCal.bCellCount) 
  0152 c6008c   [4]             LDA   gv_sSC:140
  0155 95       [2]             TSX   
  0156 e104     [3]             CMP   4,X
  0158 a704     [2]             AIS   #4
  015a 2310     [3]             BLS   L16C ;abs = 016c
  182:          {
  183:            cal.vSumLow += volt;
  015c 9efe02   [5]             LDHX  2,SP
  015f 4f       [1]             CLRA  
  0160 89       [2]             PSHX  
  0161 8b       [2]             PSHH  
  0162 87       [2]             PSHA  
  0163 87       [2]             PSHA  
  0164 95       [2]             TSX   
  0165 89       [2]             PSHX  
  0166 8b       [2]             PSHH  
  0167 450046   [3]             LDHX  @cal:70
  184:          } 
  016a 200e     [3]             BRA   L17A ;abs = 017a
  016c          L16C:   
  185:          else
  186:          {
  187:            cal.vSumHigh += volt;
  016c 9efe02   [5]             LDHX  2,SP
  016f 4f       [1]             CLRA  
  0170 89       [2]             PSHX  
  0171 8b       [2]             PSHH  
  0172 87       [2]             PSHA  
  0173 87       [2]             PSHA  
  0174 95       [2]             TSX   
  0175 89       [2]             PSHX  
  0176 8b       [2]             PSHH  
  0177 45004a   [3]             LDHX  @cal:74
  017a          L17A:   
  017a cd0000   [6]             JSR   _LADD
  017d cd0000   [6]             JSR   _POP32
  0180 a704     [2]             AIS   #4
  0182          L182:   
  188:          }
  189:        }
  190:        
  191:        //  count up
  192:        cnt++;
  0182 95       [2]             TSX   
  0183 6c09     [5]             INC   9,X
  0185          L185:   
  0185 7c       [4]             INC   ,X
  0186          L186:   
  0186 c6008b   [4]             LDA   gv_sSC:139
  0189 f1       [3]             CMP   ,X
  018a 2303     [3]             BLS   L18F ;abs = 018f
  018c cc009f   [4]             JMP   L9F ;abs = 009f
  018f          L18F:   
  193:  
  194:      }
  195:      
  196:    }
  197:  
  198:    //  average voltage
  199:    if( (cal.vsum&0x80000000)==0 && cnt>0 ){
  018f c60042   [4]             LDA   cal:66
  0192 2b64     [3]             BMI   L1F8 ;abs = 01f8
  0194 6d09     [4]             TST   9,X
  0196 2760     [3]             BEQ   L1F8 ;abs = 01f8
  200:      unsigned long tmp;
  201:      tmp = (cnt+1)/2;
  0198 e609     [3]             LDA   9,X
  019a 8c       [1]             CLRH  
  019b 97       [1]             TAX   
  019c af01     [2]             AIX   #1
  019e 89       [2]             PSHX  
  019f 8b       [2]             PSHH  
  01a0 ae02     [2]             LDX   #2
  01a2 8c       [1]             CLRH  
  01a3 cd0000   [6]             JSR   _IDIVS_STAR08
  01a6 a702     [2]             AIS   #2
  01a8 9f       [1]             TXA   
  01a9 8b       [2]             PSHH  
  01aa 88       [3]             PULX  
  01ab 87       [2]             PSHA  
  01ac cd0000   [6]             JSR   _SEXT16_32
  01af 95       [2]             TSX   
  01b0 af09     [2]             AIX   #9
  01b2 cd0000   [6]             JSR   _POP32
  202:      tmp += cal.vsum;
  01b5 95       [2]             TSX   
  01b6 af05     [2]             AIX   #5
  01b8 89       [2]             PSHX  
  01b9 8b       [2]             PSHH  
  01ba 450042   [3]             LDHX  @cal:66
  01bd cd0000   [6]             JSR   _LADD
  01c0 95       [2]             TSX   
  01c1 af09     [2]             AIX   #9
  01c3 cd0000   [6]             JSR   _POP32
  203:      tmp /= cnt;
  01c6 95       [2]             TSX   
  01c7 e609     [3]             LDA   9,X
  01c9 5f       [1]             CLRX  
  01ca 87       [2]             PSHA  
  01cb 89       [2]             PSHX  
  01cc 89       [2]             PSHX  
  01cd 89       [2]             PSHX  
  01ce 95       [2]             TSX   
  01cf 89       [2]             PSHX  
  01d0 8b       [2]             PSHH  
  01d1 af09     [2]             AIX   #9
  01d3 cd0000   [6]             JSR   _LDIVU
  01d6 cd0000   [6]             JSR   _POP32
  204:      if( tmp>0x7FFF ) tmp=0x7FFF;
  01d9 95       [2]             TSX   
  01da af09     [2]             AIX   #9
  01dc cd0000   [6]             JSR   _LCMP_RC
  01df 00007fff         DC.L  32767
  01e3 a704     [2]             AIS   #4
  01e5 230b     [3]             BLS   L1F2 ;abs = 01f2
  01e7 457fff   [3]             LDHX  #32767
  01ea 9eff08   [5]             STHX  8,SP
  01ed 5f       [1]             CLRX  
  01ee 8c       [1]             CLRH  
  01ef 9eff06   [5]             STHX  6,SP
  01f2          L1F2:   
  205:      cal.vave = (unsigned short)tmp;
  01f2 9efe08   [5]             LDHX  8,SP
  01f5 96003c   [5]             STHX  cal:60
  01f8          L1F8:   
  206:    }
  207:  
  208:    /* bal temp */
  209:    for( i=0;i<gv_sSC.sVS.bLtc6802Count;i++){
  01f8 95       [2]             TSX   
  01f9 7f       [4]             CLR   ,X
  01fa 2029     [3]             BRA   L225 ;abs = 0225
  01fc          L1FC:   
  210:      unsigned short ti;
  211:      ti = vs_data[i].itemp;
  01fc fe       [3]             LDX   ,X
  01fd 9f       [1]             TXA   
  01fe 62       [1]             NSA   
  01ff a4f0     [2]             AND   #-16
  0201 48       [1]             LSLA  
  0202 8c       [1]             CLRH  
  0203 97       [1]             TAX   
  0204 9ebe001c [6]             LDHX  @vs_data:28,X
  0208 9eff0b   [5]             STHX  11,SP
  212:      if( (ti&0x8000)==0 ){
  020b 95       [2]             TSX   
  020c e60a     [3]             LDA   10,X
  020e 2b13     [3]             BMI   L223 ;abs = 0223
  213:        if( (cal.bal_temp&0x8000) || cal.bal_temp<ti ){        
  0210 c600d8   [4]             LDA   cal:216
  0213 2b08     [3]             BMI   L21D ;abs = 021d
  0215 3200d8   [5]             LDHX  cal:216
  0218 9ef30b   [6]             CPHX  11,SP
  021b 2406     [3]             BCC   L223 ;abs = 0223
  021d          L21D:   
  214:          cal.bal_temp = ti;
  021d 9efe0b   [5]             LDHX  11,SP
  0220 9600d8   [5]             STHX  cal:216
  0223          L223:   
  0223 95       [2]             TSX   
  0224 7c       [4]             INC   ,X
  0225          L225:   
  0225 c60014   [4]             LDA   gv_sSC:20
  0228 f1       [3]             CMP   ,X
  0229 22d1     [3]             BHI   L1FC ;abs = 01fc
  215:        }
  216:      }
  217:    }
  218:  
  219:  }
  022b a70e     [2]             AIS   #14
  022d 81       [6]             RTS   
  220:  
  221:  static void cal_temp(void)
  222:  {

Function: cal_temp
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application\cal.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\cal.c.o" -WmsgSd1106

  0000 a7f1     [2]             AIS   #-15
  223:    unsigned char i;
  224:    unsigned char cnt;
  225:  
  226:    /* get temps */
  227:    for(i=0;i<gv_sSC.sCal.bTempCount;i++){
  0002 95       [2]             TSX   
  0003 7f       [4]             CLR   ,X
  0004 cc00e7   [4]             JMP   LE7 ;abs = 00e7
  0007          L7:     
  228:      unsigned char si;
  229:      unsigned char ii;
  230:      
  231:      ii = gv_sSC.sCal.baTempMap[i];
  0007 fe       [3]             LDX   ,X
  0008 8c       [1]             CLRH  
  0009 d600ef   [4]             LDA   @gv_sSC:239,X
  232:      si = ii>>5;
  000c 87       [2]             PSHA  
  000d 62       [1]             NSA   
  000e a40f     [2]             AND   #15
  0010 44       [1]             LSRA  
  0011 9ee703   [4]             STA   3,SP
  233:      ii &= 0x1F;
  0014 86       [3]             PULA  
  0015 a41f     [2]             AND   #31
  0017 9ee705   [4]             STA   5,SP
  234:      
  235:      if( ii>=24 ) continue;
  001a a118     [2]             CMP   #24
  001c 245e     [3]             BCC   L7C ;abs = 007c
  236:      
  237:      if( si==0 ){
  001e 9e6d02   [5]             TST   2,SP
  0021 2621     [3]             BNE   L44 ;abs = 0044
  238:        cal.temp[i] = ts_data.temp[ii];  //  from original temp
  0023 58       [1]             LSLX  
  0024 4f       [1]             CLRA  
  0025 49       [1]             ROLA  
  0026 89       [2]             PSHX  
  0027 95       [2]             TSX   
  0028 ee05     [3]             LDX   5,X
  002a 58       [1]             LSLX  
  002b 87       [2]             PSHA  
  002c cd033b   [6]             JSR   L33B ;abs = 033b
  002f 9ebe0000 [6]             LDHX  @ts_data,X
  0033 8b       [2]             PSHH  
  0034 9ee602   [4]             LDA   2,SP
  0037 87       [2]             PSHA  
  0038 8a       [3]             PULH  
  0039 9f       [1]             TXA   
  003a 9eee03   [4]             LDX   3,SP
  003d d70055   [4]             STA   @cal:85,X
  0040 86       [3]             PULA  
  239:      }else if( si==1 ){
  0041 cc00e0   [4]             JMP   LE0 ;abs = 00e0
  0044          L44:    
  0044 9ee602   [4]             LDA   2,SP
  0047 a101     [2]             CMP   #1
  0049 2633     [3]             BNE   L7E ;abs = 007e
  240:        ii = gv_sSC.sTS.baList1[ii];
  004b 9eee05   [4]             LDX   5,SP
  004e d6003c   [4]             LDA   @gv_sSC:60,X
  0051 95       [2]             TSX   
  0052 e704     [3]             STA   4,X
  241:        if( ii<24 ) cal.temp[i] = ts_data.temp[ii]; //  from list 1
  0054 a118     [2]             CMP   #24
  0056 2424     [3]             BCC   L7C ;abs = 007c
  0058 f6       [3]             LDA   ,X
  0059 48       [1]             LSLA  
  005a 5f       [1]             CLRX  
  005b 59       [1]             ROLX  
  005c 89       [2]             PSHX  
  005d 95       [2]             TSX   
  005e ee05     [3]             LDX   5,X
  0060 58       [1]             LSLX  
  0061 87       [2]             PSHA  
  0062 cd033b   [6]             JSR   L33B ;abs = 033b
  0065 9ebe0000 [6]             LDHX  @ts_data,X
  0069 8b       [2]             PSHH  
  006a 9ee603   [4]             LDA   3,SP
  006d 87       [2]             PSHA  
  006e 8a       [3]             PULH  
  006f 9f       [1]             TXA   
  0070 9eee02   [4]             LDX   2,SP
  0073 d70055   [4]             STA   @cal:85,X
  0076 86       [3]             PULA  
  0077 d70054   [4]             STA   @cal:84,X
  007a a702     [2]             AIS   #2
  007c          L7C:    
  242:      }else if( si==2 ){
  007c 2067     [3]             BRA   LE5 ;abs = 00e5
  007e          L7E:    
  007e a102     [2]             CMP   #2
  0080 2633     [3]             BNE   LB5 ;abs = 00b5
  243:        ii = gv_sSC.sTS.baList2[ii];
  0082 9eee05   [4]             LDX   5,SP
  0085 d60055   [4]             LDA   @gv_sSC:85,X
  0088 95       [2]             TSX   
  0089 e704     [3]             STA   4,X
  244:        if( ii<24 ) cal.temp[i] = ts_data.temp[ii]; //  from list 2
  008b a118     [2]             CMP   #24
  008d 2456     [3]             BCC   LE5 ;abs = 00e5
  008f f6       [3]             LDA   ,X
  0090 48       [1]             LSLA  
  0091 5f       [1]             CLRX  
  0092 59       [1]             ROLX  
  0093 89       [2]             PSHX  
  0094 95       [2]             TSX   
  0095 ee05     [3]             LDX   5,X
  0097 58       [1]             LSLX  
  0098 87       [2]             PSHA  
  0099 cd033b   [6]             JSR   L33B ;abs = 033b
  009c 9ebe0000 [6]             LDHX  @ts_data,X
  00a0 8b       [2]             PSHH  
  00a1 9ee603   [4]             LDA   3,SP
  00a4 87       [2]             PSHA  
  00a5 8a       [3]             PULH  
  00a6 9f       [1]             TXA   
  00a7 9eee02   [4]             LDX   2,SP
  00aa d70055   [4]             STA   @cal:85,X
  00ad 86       [3]             PULA  
  00ae d70054   [4]             STA   @cal:84,X
  00b1 a702     [2]             AIS   #2
  00b3          LB3:    
  245:      }else{
  00b3 2030     [3]             BRA   LE5 ;abs = 00e5
  00b5          LB5:    
  246:        cal.temp[i] = gv_sSC.sCal.haTempRef[ii];    //  from ref temp
  00b5 95       [2]             TSX   
  00b6 ee04     [3]             LDX   4,X
  00b8 58       [1]             LSLX  
  00b9 4f       [1]             CLRA  
  00ba 49       [1]             ROLA  
  00bb 87       [2]             PSHA  
  00bc 9ee602   [4]             LDA   2,SP
  00bf 48       [1]             LSLA  
  00c0 87       [2]             PSHA  
  00c1 4f       [1]             CLRA  
  00c2 49       [1]             ROLA  
  00c3 87       [2]             PSHA  
  00c4 9ee603   [4]             LDA   3,SP
  00c7 87       [2]             PSHA  
  00c8 8a       [3]             PULH  
  00c9 86       [3]             PULA  
  00ca 9ebe00bd [6]             LDHX  @gv_sSC:189,X
  00ce 87       [2]             PSHA  
  00cf 8b       [2]             PSHH  
  00d0 86       [3]             PULA  
  00d1 9ee703   [4]             STA   3,SP
  00d4 8a       [3]             PULH  
  00d5 89       [2]             PSHX  
  00d6 9eee02   [4]             LDX   2,SP
  00d9 86       [3]             PULA  
  00da d70055   [4]             STA   @cal:85,X
  00dd 9ee602   [4]             LDA   2,SP
  00e0          LE0:    
  00e0 d70054   [4]             STA   @cal:84,X
  00e3 a702     [2]             AIS   #2
  00e5          LE5:    
  00e5 95       [2]             TSX   
  00e6 7c       [4]             INC   ,X
  00e7          LE7:    
  00e7 c600ed   [4]             LDA   gv_sSC:237
  00ea f1       [3]             CMP   ,X
  00eb 2303     [3]             BLS   LF0 ;abs = 00f0
  00ed cc0007   [4]             JMP   L7 ;abs = 0007
  00f0          LF0:    
  247:      }
  248:    
  249:    }
  250:    
  251:    /* tsum, tmax, tmin */
  252:    cnt = 0;
  00f0 6f05     [5]             CLR   5,X
  253:    for(i=0;i<gv_sSC.sCal.bTempCount;i++){
  00f2 7f       [4]             CLR   ,X
  00f3 cc01d0   [4]             JMP   L1D0 ;abs = 01d0
  00f6          LF6:    
  254:      unsigned short temp;
  255:      temp = cal.temp[i];
  00f6 fe       [3]             LDX   ,X
  00f7 58       [1]             LSLX  
  00f8 cd033b   [6]             JSR   L33B ;abs = 033b
  00fb 9ebe0054 [6]             LDHX  @cal:84,X
  00ff 9eff0e   [5]             STHX  14,SP
  256:      
  257:      //  do if valid
  258:      if( (temp&0x8000)==0 ){
  0102 95       [2]             TSX   
  0103 e60d     [3]             LDA   13,X
  0105 2a03     [3]             BPL   L10A ;abs = 010a
  0107 cc01ce   [4]             JMP   L1CE ;abs = 01ce
  010a          L10A:   
  259:      
  260:        //  tmax
  261:        if(i < gv_sSC.sCal.bResistorCount) 
  010a c600ee   [4]             LDA   gv_sSC:238
  010d f1       [3]             CMP   ,X
  010e 231f     [3]             BLS   L12F ;abs = 012f
  262:        {
  263:          if( (cal.tmax&0x8000) || (cal.tmax<temp))
  0110 c60084   [4]             LDA   cal:132
  0113 2b08     [3]             BMI   L11D ;abs = 011d
  0115 320084   [5]             LDHX  cal:132
  0118 9ef30e   [6]             CPHX  14,SP
  011b 2412     [3]             BCC   L12F ;abs = 012f
  011d          L11D:   
  264:          {
  265:            cal.tmax = temp;
  011d 9efe0e   [5]             LDHX  14,SP
  0120 960084   [5]             STHX  cal:132
  266:            cal.itmax = i;
  0123 9ee601   [4]             LDA   1,SP
  0126 c700a2   [4]             STA   cal:162
  267:            cal.tMaxLow = temp;
  0129 960086   [5]             STHX  cal:134
  268:            cal.itMaxLow = i;
  012c c700a3   [4]             STA   cal:163
  012f          L12F:   
  269:          }  
  270:        } 
  271:       /* else 
  272:        {
  273:          if( (cal.tmax&0x8000) || (cal.tmax<temp) || (cal.tMaxHigh&0x8000) || (cal.tMaxHigh<temp))
  274:            {
  275:              cal.tmax = temp;
  276:              cal.itmax = i;
  277:              cal.tMaxHigh = temp;
  278:              cal.itMaxHigh = i;
  279:            }  
  280:        }*/
  281:        
  282:        //  tmin
  283:         if(i < gv_sSC.sCal.bResistorCount) 
  012f c600ee   [4]             LDA   gv_sSC:238
  0132 95       [2]             TSX   
  0133 f1       [3]             CMP   ,X
  0134 231f     [3]             BLS   L155 ;abs = 0155
  284:        {
  285:          if( (cal.tmin&0x8000) || (cal.tmin>temp))
  0136 c6008a   [4]             LDA   cal:138
  0139 2b08     [3]             BMI   L143 ;abs = 0143
  013b 32008a   [5]             LDHX  cal:138
  013e 9ef30e   [6]             CPHX  14,SP
  0141 2312     [3]             BLS   L155 ;abs = 0155
  0143          L143:   
  286:          {
  287:            cal.tmin = temp;
  0143 9efe0e   [5]             LDHX  14,SP
  0146 96008a   [5]             STHX  cal:138
  288:            cal.itmin = i;
  0149 9ee601   [4]             LDA   1,SP
  014c c700a5   [4]             STA   cal:165
  289:            cal.tMinLow = temp;
  014f 96008c   [5]             STHX  cal:140
  290:            cal.itMinLow = i;
  0152 c700a6   [4]             STA   cal:166
  0155          L155:   
  291:          }  
  292:        } 
  293:       /* else 
  294:        {
  295:          if( (cal.tmin&0x8000) || (cal.tmin>temp) || (cal.tMinHigh&0x8000) || (cal.tMinHigh>temp))
  296:            {
  297:              cal.tmin = temp;
  298:              cal.itmin = i;
  299:              cal.tMinHigh = temp;
  300:              cal.itMinHigh = i;
  301:            }  
  302:        } */
  303:       
  304:        //  tsum
  305:        if( cal.tsum&0x80000000 ){
  0155 c60096   [4]             LDA   cal:150
  0158 2a2d     [3]             BPL   L187 ;abs = 0187
  306:          cal.tsum = temp;
  015a 9efe0e   [5]             LDHX  14,SP
  015d 960098   [5]             STHX  cal:152
  0160 8c       [1]             CLRH  
  0161 5f       [1]             CLRX  
  0162 960096   [5]             STHX  cal:150
  307:          cal.tSumLow = temp;
  0165 95       [2]             TSX   
  0166 e60e     [3]             LDA   14,X
  0168 ee0d     [3]             LDX   13,X
  016a 89       [2]             PSHX  
  016b 8a       [3]             PULH  
  016c 97       [1]             TAX   
  016d 96009c   [5]             STHX  cal:156
  0170 8c       [1]             CLRH  
  0171 5f       [1]             CLRX  
  0172 96009a   [5]             STHX  cal:154
  308:          cal.tSumHigh = temp;
  0175 95       [2]             TSX   
  0176 e60e     [3]             LDA   14,X
  0178 ee0d     [3]             LDX   13,X
  017a 89       [2]             PSHX  
  017b 8a       [3]             PULH  
  017c 97       [1]             TAX   
  017d 9600a0   [5]             STHX  cal:160
  0180 8c       [1]             CLRH  
  0181 5f       [1]             CLRX  
  0182 96009e   [5]             STHX  cal:158
  309:        }else{
  0185 2044     [3]             BRA   L1CB ;abs = 01cb
  0187          L187:   
  310:          cal.tsum += temp;
  0187 9efe0e   [5]             LDHX  14,SP
  018a 4f       [1]             CLRA  
  018b 89       [2]             PSHX  
  018c 8b       [2]             PSHH  
  018d 87       [2]             PSHA  
  018e 87       [2]             PSHA  
  018f 95       [2]             TSX   
  0190 89       [2]             PSHX  
  0191 8b       [2]             PSHH  
  0192 450096   [3]             LDHX  @cal:150
  0195 cd0000   [6]             JSR   _LADD
  0198 cd0000   [6]             JSR   _POP32
  311:          if(i < gv_sSC.sCal.bResistorCount) 
  019b c600ee   [4]             LDA   gv_sSC:238
  019e 95       [2]             TSX   
  019f e104     [3]             CMP   4,X
  01a1 a704     [2]             AIS   #4
  01a3 2310     [3]             BLS   L1B5 ;abs = 01b5
  312:          {
  313:            cal.tSumLow += temp;
  01a5 9efe0e   [5]             LDHX  14,SP
  01a8 4f       [1]             CLRA  
  01a9 89       [2]             PSHX  
  01aa 8b       [2]             PSHH  
  01ab 87       [2]             PSHA  
  01ac 87       [2]             PSHA  
  01ad 95       [2]             TSX   
  01ae 89       [2]             PSHX  
  01af 8b       [2]             PSHH  
  01b0 45009a   [3]             LDHX  @cal:154
  314:          } 
  01b3 200e     [3]             BRA   L1C3 ;abs = 01c3
  01b5          L1B5:   
  315:          else
  316:          {
  317:            cal.tSumHigh += temp;
  01b5 9efe0e   [5]             LDHX  14,SP
  01b8 4f       [1]             CLRA  
  01b9 89       [2]             PSHX  
  01ba 8b       [2]             PSHH  
  01bb 87       [2]             PSHA  
  01bc 87       [2]             PSHA  
  01bd 95       [2]             TSX   
  01be 89       [2]             PSHX  
  01bf 8b       [2]             PSHH  
  01c0 45009e   [3]             LDHX  @cal:158
  01c3          L1C3:   
  01c3 cd0000   [6]             JSR   _LADD
  01c6 cd0000   [6]             JSR   _POP32
  01c9 a704     [2]             AIS   #4
  01cb          L1CB:   
  318:          }
  319:        }
  320:        
  321:        //  count up
  322:        cnt++;
  01cb 95       [2]             TSX   
  01cc 6c05     [5]             INC   5,X
  01ce          L1CE:   
  01ce 95       [2]             TSX   
  01cf 7c       [4]             INC   ,X
  01d0          L1D0:   
  01d0 c600ed   [4]             LDA   gv_sSC:237
  01d3 f1       [3]             CMP   ,X
  01d4 2303     [3]             BLS   L1D9 ;abs = 01d9
  01d6 cc00f6   [4]             JMP   LF6 ;abs = 00f6
  01d9          L1D9:   
  323:  
  324:      }
  325:    }
  326:    
  327:    /* tave */
  328:    if( (cal.tsum&0x80000000)==0 && cnt>0 ){
  01d9 c60096   [4]             LDA   cal:150
  01dc 2b64     [3]             BMI   L242 ;abs = 0242
  01de 6d05     [4]             TST   5,X
  01e0 2760     [3]             BEQ   L242 ;abs = 0242
  329:      unsigned long tmp;
  330:      tmp = (cnt+1)/2;
  01e2 e605     [3]             LDA   5,X
  01e4 8c       [1]             CLRH  
  01e5 97       [1]             TAX   
  01e6 af01     [2]             AIX   #1
  01e8 89       [2]             PSHX  
  01e9 8b       [2]             PSHH  
  01ea ae02     [2]             LDX   #2
  01ec 8c       [1]             CLRH  
  01ed cd0000   [6]             JSR   _IDIVS_STAR08
  01f0 a702     [2]             AIS   #2
  01f2 9f       [1]             TXA   
  01f3 8b       [2]             PSHH  
  01f4 88       [3]             PULX  
  01f5 87       [2]             PSHA  
  01f6 cd0000   [6]             JSR   _SEXT16_32
  01f9 95       [2]             TSX   
  01fa af0c     [2]             AIX   #12
  01fc cd0000   [6]             JSR   _POP32
  331:      tmp += cal.tsum;
  01ff 95       [2]             TSX   
  0200 af08     [2]             AIX   #8
  0202 89       [2]             PSHX  
  0203 8b       [2]             PSHH  
  0204 450096   [3]             LDHX  @cal:150
  0207 cd0000   [6]             JSR   _LADD
  020a 95       [2]             TSX   
  020b af0c     [2]             AIX   #12
  020d cd0000   [6]             JSR   _POP32
  332:      tmp /= cnt;
  0210 95       [2]             TSX   
  0211 e605     [3]             LDA   5,X
  0213 5f       [1]             CLRX  
  0214 87       [2]             PSHA  
  0215 89       [2]             PSHX  
  0216 89       [2]             PSHX  
  0217 89       [2]             PSHX  
  0218 95       [2]             TSX   
  0219 89       [2]             PSHX  
  021a 8b       [2]             PSHH  
  021b af0c     [2]             AIX   #12
  021d cd0000   [6]             JSR   _LDIVU
  0220 cd0000   [6]             JSR   _POP32
  333:      if( tmp>0x7FFF ) tmp=0x7FFF;
  0223 95       [2]             TSX   
  0224 af0c     [2]             AIX   #12
  0226 cd0000   [6]             JSR   _LCMP_RC
  0229 00007fff         DC.L  32767
  022d a704     [2]             AIS   #4
  022f 230b     [3]             BLS   L23C ;abs = 023c
  0231 457fff   [3]             LDHX  #32767
  0234 9eff0b   [5]             STHX  11,SP
  0237 5f       [1]             CLRX  
  0238 8c       [1]             CLRH  
  0239 9eff09   [5]             STHX  9,SP
  023c          L23C:   
  334:      cal.tave = (unsigned short)tmp;
  023c 9efe0b   [5]             LDHX  11,SP
  023f 960090   [5]             STHX  cal:144
  0242          L242:   
  335:    }
  336:    
  337:    /* sort */
  338:    if( cnt>0 ){
  0242 95       [2]             TSX   
  0243 6d05     [4]             TST   5,X
  0245 2603     [3]             BNE   L24A ;abs = 024a
  0247 cc0318   [4]             JMP   L318 ;abs = 0318
  024a          L24A:   
  339:      for(i=0;i<cnt;i++) cal.temp_sorted[i] = cal.temp[i];
  024a 7f       [4]             CLR   ,X
  024b 202c     [3]             BRA   L279 ;abs = 0279
  024d          L24D:   
  024d fe       [3]             LDX   ,X
  024e 58       [1]             LSLX  
  024f 4f       [1]             CLRA  
  0250 49       [1]             ROLA  
  0251 87       [2]             PSHA  
  0252 9ee602   [4]             LDA   2,SP
  0255 48       [1]             LSLA  
  0256 87       [2]             PSHA  
  0257 cd033b   [6]             JSR   L33B ;abs = 033b
  025a 89       [2]             PSHX  
  025b 9eee02   [4]             LDX   2,SP
  025e 9ebe0054 [6]             LDHX  @cal:84,X
  0262 8b       [2]             PSHH  
  0263 86       [3]             PULA  
  0264 9ee702   [4]             STA   2,SP
  0267 9ee603   [4]             LDA   3,SP
  026a 87       [2]             PSHA  
  026b 8a       [3]             PULH  
  026c 9f       [1]             TXA   
  026d 88       [3]             PULX  
  026e d700a9   [4]             STA   @cal:169,X
  0271 86       [3]             PULA  
  0272 d700a8   [4]             STA   @cal:168,X
  0275 95       [2]             TSX   
  0276 6c01     [5]             INC   1,X
  0278 8a       [3]             PULH  
  0279          L279:   
  0279 95       [2]             TSX   
  027a e605     [3]             LDA   5,X
  027c f1       [3]             CMP   ,X
  027d 22ce     [3]             BHI   L24D ;abs = 024d
  340:      if( cnt>1 ){
  027f a101     [2]             CMP   #1
  0281 2203     [3]             BHI   L286 ;abs = 0286
  0283 cc0318   [4]             JMP   L318 ;abs = 0318
  0286          L286:   
  341:        for(i=0;i<cnt-1;i++){
  0286 7f       [4]             CLR   ,X
  0287 2078     [3]             BRA   L301 ;abs = 0301
  0289          L289:   
  342:          unsigned char j;
  343:          for(j=i;j<cnt;j++){
  0289 95       [2]             TSX   
  028a f6       [3]             LDA   ,X
  028b e70c     [3]             STA   12,X
  028d 206b     [3]             BRA   L2FA ;abs = 02fa
  028f          L28F:   
  344:            unsigned short ti, tj;
  345:  
  346:            ti = cal.temp_sorted[i];
  028f fe       [3]             LDX   ,X
  0290 58       [1]             LSLX  
  0291 cd033b   [6]             JSR   L33B ;abs = 033b
  0294 9ebe00a8 [6]             LDHX  @cal:168,X
  0298 9eff03   [5]             STHX  3,SP
  347:            tj = cal.temp_sorted[j];
  029b 95       [2]             TSX   
  029c ee0c     [3]             LDX   12,X
  029e 58       [1]             LSLX  
  029f cd033b   [6]             JSR   L33B ;abs = 033b
  02a2 9ebe00a8 [6]             LDHX  @cal:168,X
  02a6 9eff07   [5]             STHX  7,SP
  348:            
  349:            if( (ti&0x8000)!=0 && (tj&0x8000)==0 ){
  02a9 95       [2]             TSX   
  02aa e602     [3]             LDA   2,X
  02ac 2a11     [3]             BPL   L2BF ;abs = 02bf
  02ae e606     [3]             LDA   6,X
  02b0 2b0d     [3]             BMI   L2BF ;abs = 02bf
  350:              cal.temp_sorted[i] = tj;
  02b2 f6       [3]             LDA   ,X
  02b3 48       [1]             LSLA  
  02b4 5f       [1]             CLRX  
  02b5 59       [1]             ROLX  
  02b6 87       [2]             PSHA  
  02b7 89       [2]             PSHX  
  02b8 95       [2]             TSX   
  02b9 e609     [3]             LDA   9,X
  02bb 8a       [3]             PULH  
  02bc 88       [3]             PULX  
  351:              cal.temp_sorted[j] = ti;
  352:              continue;
  02bd 201b     [3]             BRA   L2DA ;abs = 02da
  02bf          L2BF:   
  353:            }
  354:  
  355:            if( (ti&0x8000)==0 && (tj&0x8000)==0 ){
  02bf 95       [2]             TSX   
  02c0 e602     [3]             LDA   2,X
  02c2 2b33     [3]             BMI   L2F7 ;abs = 02f7
  02c4 e606     [3]             LDA   6,X
  02c6 2b2f     [3]             BMI   L2F7 ;abs = 02f7
  356:              if( ti<tj ){
  02c8 9efe07   [5]             LDHX  7,SP
  02cb 9ef303   [6]             CPHX  3,SP
  02ce 2327     [3]             BLS   L2F7 ;abs = 02f7
  357:                cal.temp_sorted[i] = tj;
  02d0 95       [2]             TSX   
  02d1 fe       [3]             LDX   ,X
  02d2 58       [1]             LSLX  
  02d3 4f       [1]             CLRA  
  02d4 49       [1]             ROLA  
  02d5 87       [2]             PSHA  
  02d6 9ee609   [4]             LDA   9,SP
  02d9 8a       [3]             PULH  
  02da          L2DA:   
  02da d700a9   [4]             STA   @cal:169,X
  02dd 9ee607   [4]             LDA   7,SP
  02e0 d700a8   [4]             STA   @cal:168,X
  358:                cal.temp_sorted[j] = ti;
  02e3 95       [2]             TSX   
  02e4 ee0c     [3]             LDX   12,X
  02e6 58       [1]             LSLX  
  02e7 4f       [1]             CLRA  
  02e8 49       [1]             ROLA  
  02e9 87       [2]             PSHA  
  02ea 9ee605   [4]             LDA   5,SP
  02ed 8a       [3]             PULH  
  02ee d700a9   [4]             STA   @cal:169,X
  02f1 9ee603   [4]             LDA   3,SP
  02f4 d700a8   [4]             STA   @cal:168,X
  02f7          L2F7:   
  02f7 95       [2]             TSX   
  02f8 6c0c     [5]             INC   12,X
  02fa          L2FA:   
  02fa e605     [3]             LDA   5,X
  02fc e10c     [3]             CMP   12,X
  02fe 228f     [3]             BHI   L28F ;abs = 028f
  0300 7c       [4]             INC   ,X
  0301          L301:   
  0301 e605     [3]             LDA   5,X
  0303 8c       [1]             CLRH  
  0304 97       [1]             TAX   
  0305 afff     [2]             AIX   #-1
  0307 9ee601   [4]             LDA   1,SP
  030a 87       [2]             PSHA  
  030b 4f       [1]             CLRA  
  030c 87       [2]             PSHA  
  030d 9f       [1]             TXA   
  030e 8b       [2]             PSHH  
  030f 88       [3]             PULX  
  0310 cd0000   [6]             JSR   _ICMP
  0313 9303     [3]             BLE   L318 ;abs = 0318
  0315 cc0289   [4]             JMP   L289 ;abs = 0289
  0318          L318:   
  359:                continue;
  360:              }
  361:            }
  362:          }
  363:        }
  364:      }
  365:    }
  366:  
  367:    //  main temp
  368:    if( (cal.bal_temp&0x8000)==0 ){
  0318 c600d8   [4]             LDA   cal:216
  031b 2b15     [3]             BMI   L332 ;abs = 0332
  369:      cal.main_temp = cal.bal_temp;
  031d 3200d8   [5]             LDHX  cal:216
  0320 9600da   [5]             STHX  cal:218
  370:      if( (ts_data.mcu_temp&0x8000)==0 && cal.main_temp<ts_data.mcu_temp){
  0323 c60030   [4]             LDA   ts_data:48
  0326 2b10     [3]             BMI   L338 ;abs = 0338
  0328 320030   [5]             LDHX  ts_data:48
  032b 3e00da   [6]             CPHX  cal:218
  032e 2205     [3]             BHI   L335 ;abs = 0335
  0330 2006     [3]             BRA   L338 ;abs = 0338
  0332          L332:   
  371:        cal.main_temp = ts_data.mcu_temp;
  372:      }
  373:    }else{
  374:      cal.main_temp = ts_data.mcu_temp;
  0332 320030   [5]             LDHX  ts_data:48
  0335          L335:   
  0335 9600da   [5]             STHX  cal:218
  0338          L338:   
  375:    }
  376:  }
  0338 a70f     [2]             AIS   #15
  033a 81       [6]             RTS   
  033b          L33B:   
  033b 4f       [1]             CLRA  
  033c 49       [1]             ROLA  
  033d 87       [2]             PSHA  
  033e 8a       [3]             PULH  
  033f 81       [6]             RTS   
  377:  
  378:  void cal_proc(void)
  379:  {

Function: cal_proc
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application\cal.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\cal.c.o" -WmsgSd1106

  380:    cal_clear();
  0000 cd0000   [6]             JSR   cal_clear
  381:    cal_volt();
  0003 cd0000   [6]             JSR   cal_volt
  382:    cal_temp();
  0006 cc0000   [4]             JMP   cal_temp
  383:  }
  384:  
  385:  void cal_reset(void)
  386:  {

Function: cal_reset
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application\cal.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\cal.c.o" -WmsgSd1106

  387:  }
  0000 81       [6]             RTS   
  388:  
  389:  
