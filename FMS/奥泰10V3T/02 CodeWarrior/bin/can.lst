ANSI-C/cC++ Compiler for HC08 V-5.0.32 Build 9279, Oct  7 2009

    1:  /**
    2:    ******************************************************************************
    3:    * proj    firmware startup project
    4:    * file    template.c
    5:    * ver     1.0
    6:    * brief   This is a template file for all C files.
    7:    ------------------------------------------------------------------------------
    8:    * 2012.02 created by taoyu@bakai.com
    9:    */ 
   10:  
   11:  /* File Id -------------------------------------------------------------------*/
   12:  #define _CAN_C_ 0x44
   13:  #define FILE_No _CAN_C_
   14:  
   15:  /* Includes ------------------------------------------------------------------*/
   16:  #include  "can.h"  /* mandotary */
   17:  #include  "mcu.h"
   18:  #include  "sc.h"
   19:  
   20:  /* Private Macros & Defines --------------------------------------------------*/
   21:  
   22:  #ifndef TEST_MSCAN
   23:  #define TEST_MSCAN  0
   24:  #endif
   25:  
   26:  /* Private typedefs ----------------------------------------------------------*/
   27:  
   28:  typedef struct
   29:  {
   30:    mscan_txframe_t txframe;
   31:    can_frame_t frame;
   32:  }
   33:  can_t;
   34:  
   35:  /* Private consts ------------------------------------------------------------*/
   36:  
   37:  /* Private variables ---------------------------------------------------------*/
   38:  
   39:  static can_t can;
   40:  
   41:  /* Private function prototypes -----------------------------------------------*/
   42:  
   43:  static void can_down_frame(can_frame_t* f, mscan_txframe_t* m);
   44:  static void can_up_frame(mscan_rxframe_t* m, can_frame_t* f);
   45:  
   46:  /* Global consts -------------------------------------------------------------*/
   47:  
   48:  /* Global variables ----------------------------------------------------------*/
   49:  
   50:  /* Functions -----------------------------------------------------------------*/
   51:  
   52:  /**
   53:    * bref    template function
   54:    * param   none
   55:    * retval  none
   56:    */
   57:  
   58:  int can_init(void) {

Function: can_init
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules\can.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\can.c.o" -WmsgSd1106

  0000 a7ec     [2]             AIS   #-20
   59:  
   60:    mscan_config_t  f;
   61:    
   62:    /* init can */
   63:    f.brp = gv_sSC.sBMU.eCanBaudrate;
  0002 320010   [5]             LDHX  gv_sSC:16
  0005 9eff01   [5]             STHX  1,SP
   64:    f.idam = MSCAN_IDAM_32x2;
  0008 5f       [1]             CLRX  
  0009 8c       [1]             CLRH  
  000a 9eff03   [5]             STHX  3,SP
   65:  
   66:    /* filter 1 : STD, 10X, 30X, 50X, 70X only */
   67:    f.idar[0] = 0x20; //  ID10 ID9  1   0   0   0  0  ID3
  000d a620     [2]             LDA   #32
  000f 95       [2]             TSX   
  0010 e704     [3]             STA   4,X
   68:    f.idmr[0] = 0xC1; //    -   -   M   M   M   M  M   -
  0012 a6c1     [2]             LDA   #-63
  0014 e70c     [3]             STA   12,X
   69:    f.idar[1] = 0x00; //  ID2  ID1 ID0 RTR IDE  -  -   -
  0016 6f05     [5]             CLR   5,X
   70:    f.idmr[1] = 0xE7; //   -    -   -   M   M   -  -   -  
  0018 a6e7     [2]             LDA   #-25
  001a e70d     [3]             STA   13,X
   71:    f.idmr[2] = 0xFF;
  001c a6ff     [2]             LDA   #-1
  001e e70e     [3]             STA   14,X
   72:    f.idmr[3] = 0xFF;
  0020 e70f     [3]             STA   15,X
   73:  
   74:    /* filter 2 : no pass */
   75:    f.idar[4] = 0x00;
  0022 6f08     [5]             CLR   8,X
   76:    f.idar[5] = 0x00;
  0024 6f09     [5]             CLR   9,X
   77:    f.idar[6] = 0x00;
  0026 6f0a     [5]             CLR   10,X
   78:    f.idar[7] = 0x00;
  0028 6f0b     [5]             CLR   11,X
   79:    f.idmr[4] = 0x00;
  002a 6f10     [5]             CLR   16,X
   80:    f.idmr[5] = 0x00;
  002c 6f11     [5]             CLR   17,X
   81:    f.idmr[6] = 0x00;
  002e 6f12     [5]             CLR   18,X
   82:    f.idmr[7] = 0x00;
  0030 6f13     [5]             CLR   19,X
   83:  
   84:    (void)mscan_init(&f);
  0032 cd0000   [6]             JSR   mscan_init
   85:    (void)pin_low(PN_CAN_STB);
  0035 ae06     [2]             LDX   #6
  0037 8c       [1]             CLRH  
  0038 cd0000   [6]             JSR   pin_low
   86:  
   87:    return 1;
  003b ae01     [2]             LDX   #1
  003d 8c       [1]             CLRH  
   88:  }
  003e a714     [2]             AIS   #20
  0040 81       [6]             RTS   
   89:  
   90:  int can_reset(void){

Function: can_reset
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules\can.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\can.c.o" -WmsgSd1106

   91:  
   92:    (void)pin_high(PN_CAN_STB);
  0000 ae06     [2]             LDX   #6
  0002 8c       [1]             CLRH  
  0003 cd0000   [6]             JSR   pin_high
   93:    (void)mscan_reset();
  0006 cd0000   [6]             JSR   mscan_reset
   94:  
   95:    return 1;
  0009 ae01     [2]             LDX   #1
  000b 8c       [1]             CLRH  
   96:  }
  000c 81       [6]             RTS   
   97:  
   98:  int can_xmit(can_frame_t * f){

Function: can_xmit
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules\can.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\can.c.o" -WmsgSd1106

   99:  
  100:    /* down frame */
  101:    can_down_frame(f,&can.txframe);
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 450000   [3]             LDHX  @can
  0005 cd0000   [6]             JSR   can_down_frame
  0008 a702     [2]             AIS   #2
  102:    
  103:    /* send out */
  104:    return mscan_xmit(&can.txframe);
  000a 450000   [3]             LDHX  @can
  000d cc0000   [4]             JMP   mscan_xmit
  105:  
  106:  }
  107:  
  108:  #if !TEST_MSCAN
  109:  void mscan_rxcb(mscan_rxframe_t * f){

Function: mscan_rxcb
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules\can.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\can.c.o" -WmsgSd1106

  110:  
  111:    /* up frame */
  112:   // can_up_frame(f,&can.frame);
  113:  
  114:    /* rx callback */
  115:    gf_vCanRxcb(&can.frame);
  0000 45000e   [3]             LDHX  @can:14
  0003 cc0000   [4]             JMP   gf_vCanRxcb
  116:  
  117:  }
  118:  #endif
  119:  
  120:  static void can_down_frame(can_frame_t* f, mscan_txframe_t* m)
  121:  {

Function: can_down_frame
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules\can.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\can.c.o" -WmsgSd1106

  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  122:  
  123:    /* standard id : 0x000-0x7FF */
  124:    if( f->id < 0x800 ){
  0002 9efe05   [5]             LDHX  5,SP
  0005 cd0000   [6]             JSR   _LCMP_RC
  0008 00000800         DC.L  2048
  000c 2423     [3]             BCC   L31 ;abs = 0031
  125:      /* ID[10:3] */
  126:    	m->idr.Overlap_STR.CANTIDR0STR.Byte = (unsigned char)(f->id>>3);
  000e a603     [2]             LDA   #3
  0010 9efe05   [5]             LDHX  5,SP
  0013 cd0000   [6]             JSR   _LLSR
  0016 9efe05   [5]             LDHX  5,SP
  0019 9ee604   [4]             LDA   4,SP
  001c f7       [2]             STA   ,X
  127:    	/* ID[2:0] RTR=0 IDE=0 X X X */
  128:    	m->idr.Overlap_STR.CANTIDR1STR.Byte = (unsigned char)(((f->id<<5)&0xE0)|0x00);
  001d 9efe09   [5]             LDHX  9,SP
  0020 e603     [3]             LDA   3,X
  0022 62       [1]             NSA   
  0023 a4f0     [2]             AND   #-16
  0025 48       [1]             LSLA  
  0026 9efe05   [5]             LDHX  5,SP
  0029 e701     [3]             STA   1,X
  129:    	/* X[7:0] */
  130:    	m->idr.Overlap_STR.CANTIDR2STR.Byte = (unsigned char)(0x00);
  002b 6f02     [5]             CLR   2,X
  131:    	/* X[7:0] */
  132:    	m->idr.Overlap_STR.CANTIDR3STR.Byte = (unsigned char)(0x00);
  002d 6f03     [5]             CLR   3,X
  133:    }
  002f 2051     [3]             BRA   L82 ;abs = 0082
  0031          L31:    
  134:    /* extended id : 0x20000000-0x3FFFFFFF */
  135:    else{
  136:      /* ID[28:21] */
  137:    	m->idr.Overlap_STR.CANTIDR0STR.Byte = (unsigned char)(f->id>>21);
  0031 a605     [2]             LDA   #5
  0033 87       [2]             PSHA  
  0034 9efe06   [5]             LDHX  6,SP
  0037 9eae     [5]             LDHX  ,X
  0039 9f       [1]             TXA   
  003a 8b       [2]             PSHH  
  003b 88       [3]             PULX  
  003c cd0000   [6]             JSR   _ILSR
  003f 8a       [3]             PULH  
  0040 9efe01   [5]             LDHX  1,SP
  0043 f7       [2]             STA   ,X
  138:    	/* ID[20:18] SRR=1 IDE=1 ID[17:15] */
  139:    	m->idr.Overlap_STR.CANTIDR1STR.Byte = (unsigned char)(((f->id>>13)&0xE0)|0x18|((f->id>>15)&0x07));
  0044 9efe05   [5]             LDHX  5,SP
  0047 a60d     [2]             LDA   #13
  0049 cd0000   [6]             JSR   _LLSR
  004c 9ee604   [4]             LDA   4,SP
  004f a4e0     [2]             AND   #-32
  0051 aa18     [2]             ORA   #24
  0053 87       [2]             PSHA  
  0054 a60f     [2]             LDA   #15
  0056 cd0000   [6]             JSR   _LLSR
  0059 95       [2]             TSX   
  005a e603     [3]             LDA   3,X
  005c a407     [2]             AND   #7
  005e ea04     [3]             ORA   4,X
  0060 9efe0a   [5]             LDHX  10,SP
  0063 e701     [3]             STA   1,X
  140:    	/* ID[14:7] */
  141:    	m->idr.Overlap_STR.CANTIDR2STR.Byte = (unsigned char)(f->id>>7);
  0065 9efe0e   [5]             LDHX  14,SP
  0068 a607     [2]             LDA   #7
  006a cd0000   [6]             JSR   _LLSR
  006d 9efe0e   [5]             LDHX  14,SP
  0070 9ee604   [4]             LDA   4,SP
  0073 e702     [3]             STA   2,X
  142:    	/* ID[6:0] RTR=0 */
  143:    	m->idr.Overlap_STR.CANTIDR3STR.Byte = (unsigned char)((f->id<<1)|0);
  0075 9efe12   [5]             LDHX  18,SP
  0078 e603     [3]             LDA   3,X
  007a 48       [1]             LSLA  
  007b 9efe0e   [5]             LDHX  14,SP
  007e e703     [3]             STA   3,X
  0080 a709     [2]             AIS   #9
  0082          L82:    
  0082 a704     [2]             AIS   #4
  144:    }
  145:    /* data length */
  146:    m->dlr.Byte = f->dlc;
  0084 9efe05   [5]             LDHX  5,SP
  0087 e604     [3]             LDA   4,X
  0089 9efe01   [5]             LDHX  1,SP
  008c e70c     [3]             STA   12,X
  147:    /* data */
  148:    m->dsr[0] = f->data[0];
  008e 9efe05   [5]             LDHX  5,SP
  0091 e605     [3]             LDA   5,X
  0093 9efe01   [5]             LDHX  1,SP
  0096 e704     [3]             STA   4,X
  149:    m->dsr[1] = f->data[1];
  0098 9efe05   [5]             LDHX  5,SP
  009b e606     [3]             LDA   6,X
  009d 9efe01   [5]             LDHX  1,SP
  00a0 e705     [3]             STA   5,X
  150:    m->dsr[2] = f->data[2];
  00a2 9efe05   [5]             LDHX  5,SP
  00a5 e607     [3]             LDA   7,X
  00a7 9efe01   [5]             LDHX  1,SP
  00aa e706     [3]             STA   6,X
  151:    m->dsr[3] = f->data[3];
  00ac 9efe05   [5]             LDHX  5,SP
  00af e608     [3]             LDA   8,X
  00b1 9efe01   [5]             LDHX  1,SP
  00b4 e707     [3]             STA   7,X
  152:    m->dsr[4] = f->data[4];
  00b6 9efe05   [5]             LDHX  5,SP
  00b9 e609     [3]             LDA   9,X
  00bb 9efe01   [5]             LDHX  1,SP
  00be e708     [3]             STA   8,X
  153:    m->dsr[5] = f->data[5];
  00c0 9efe05   [5]             LDHX  5,SP
  00c3 e60a     [3]             LDA   10,X
  00c5 9efe01   [5]             LDHX  1,SP
  00c8 e709     [3]             STA   9,X
  154:    m->dsr[6] = f->data[6];
  00ca 9efe05   [5]             LDHX  5,SP
  00cd e60b     [3]             LDA   11,X
  00cf 9efe01   [5]             LDHX  1,SP
  00d2 e70a     [3]             STA   10,X
  155:    m->dsr[7] = f->data[7];
  00d4 9efe05   [5]             LDHX  5,SP
  00d7 e60c     [3]             LDA   12,X
  00d9 9efe01   [5]             LDHX  1,SP
  00dc e70b     [3]             STA   11,X
  156:    /* priority */
  157:    m->bpr.Byte = 0;
  00de 6f0d     [5]             CLR   13,X
  158:  
  159:  }
  00e0 a702     [2]             AIS   #2
  00e2 81       [6]             RTS   
  160:  
  161:  static void can_up_frame(mscan_rxframe_t* m, can_frame_t* f)
  162:  {

Function: can_up_frame
Source  : C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules\can.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\06 Platform;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\04 Modules;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\07 Application;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\05 Devices;C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\Fms\FMS\°ÂÌ©10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\can.c.o" -WmsgSd1106

  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7f8     [2]             AIS   #-8
  163:  
  164:    /* standard id : 0x000-0x7FF */
  165:    if( m->idr.Overlap_STR.CANRIDR1STR.Bits.IDE==0 ){
  0004 9efe0d   [5]             LDHX  13,SP
  0007 e601     [3]             LDA   1,X
  0009 a508     [2]             BIT   #8
  000b 2640     [3]             BNE   L4D ;abs = 004d
  166:      unsigned long id;
  167:      /* ID[10:3] */
  168:      id = m->idr.Overlap_STR.CANRIDR0STR.Byte;
  000d f6       [3]             LDA   ,X
  000e 8c       [1]             CLRH  
  000f 97       [1]             TAX   
  0010 9eff07   [5]             STHX  7,SP
  0013 5f       [1]             CLRX  
  0014 9eff05   [5]             STHX  5,SP
  169:    	/* ID[2:0] RTR=0 IDE=0 X X X */
  170:    	id <<= 3; id += m->idr.Overlap_STR.CANRIDR1STR.Byte >> 5;
  0017 95       [2]             TSX   
  0018 af04     [2]             AIX   #4
  001a cd0183   [6]             JSR   L183 ;abs = 0183
  001d e601     [3]             LDA   1,X
  001f 62       [1]             NSA   
  0020 a40f     [2]             AND   #15
  0022 44       [1]             LSRA  
  0023 5f       [1]             CLRX  
  0024 87       [2]             PSHA  
  0025 89       [2]             PSHX  
  0026 89       [2]             PSHX  
  0027 89       [2]             PSHX  
  0028 95       [2]             TSX   
  0029 89       [2]             PSHX  
  002a 8b       [2]             PSHH  
  002b af08     [2]             AIX   #8
  002d 89       [2]             PSHX  
  002e 8b       [2]             PSHH  
  002f 9efe03   [5]             LDHX  3,SP
  0032 cd0000   [6]             JSR   _LADD
  0035 95       [2]             TSX   
  0036 af0e     [2]             AIX   #14
  0038 cd0000   [6]             JSR   _POP32
  171:    	/* X[7:0] */
  172:    	/* X[7:0] */
  173:    	/* ok */
  174:    	f->id = id;
  003b 9efe0f   [5]             LDHX  15,SP
  003e 89       [2]             PSHX  
  003f 8b       [2]             PSHH  
  0040 95       [2]             TSX   
  0041 af0c     [2]             AIX   #12
  0043 a604     [2]             LDA   #4
  0045 cd0000   [6]             JSR   _COPY
  175:    }
  0048 a706     [2]             AIS   #6
  004a cc0114   [4]             JMP   L114 ;abs = 0114
  004d          L4D:    
  176:    /* extended id : 0x20000000-0x3FFFFFFF */
  177:    else{
  178:      unsigned long id;
  179:      /* ID[28:21] */
  180:    	id = m->idr.Overlap_STR.CANRIDR0STR.Byte;
  004d f6       [3]             LDA   ,X
  004e 8c       [1]             CLRH  
  004f 97       [1]             TAX   
  0050 9eff03   [5]             STHX  3,SP
  0053 5f       [1]             CLRX  
  0054 9eff01   [5]             STHX  1,SP
  181:    	/* ID[20:18] SRR=1 IDE=1 ID[17:15] */
  182:    	id <<= 3; id += m->idr.Overlap_STR.CANRIDR1STR.Byte >> 5;
  0057 95       [2]             TSX   
  0058 cd0183   [6]             JSR   L183 ;abs = 0183
  005b e601     [3]             LDA   1,X
  005d 62       [1]             NSA   
  005e a40f     [2]             AND   #15
  0060 44       [1]             LSRA  
  0061 87       [2]             PSHA  
  0062 4f       [1]             CLRA  
  0063 87       [2]             PSHA  
  0064 87       [2]             PSHA  
  0065 87       [2]             PSHA  
  0066 95       [2]             TSX   
  0067 89       [2]             PSHX  
  0068 8b       [2]             PSHH  
  0069 af04     [2]             AIX   #4
  006b 89       [2]             PSHX  
  006c 8b       [2]             PSHH  
  006d 9efe03   [5]             LDHX  3,SP
  0070 cd0000   [6]             JSR   _LADD
  0073 95       [2]             TSX   
  0074 af0a     [2]             AIX   #10
  0076 cd0000   [6]             JSR   _POP32
  183:    	id <<= 3; id += m->idr.Overlap_STR.CANRIDR1STR.Byte & 0x07;
  0079 95       [2]             TSX   
  007a af06     [2]             AIX   #6
  007c a603     [2]             LDA   #3
  007e cd0000   [6]             JSR   _LLSL
  0081 cd0000   [6]             JSR   _POP32
  0084 9efe13   [5]             LDHX  19,SP
  0087 e601     [3]             LDA   1,X
  0089 a407     [2]             AND   #7
  008b 5f       [1]             CLRX  
  008c 87       [2]             PSHA  
  008d 89       [2]             PSHX  
  008e 89       [2]             PSHX  
  008f 89       [2]             PSHX  
  0090 95       [2]             TSX   
  0091 8b       [2]             PSHH  
  0092 ef05     [3]             STX   5,X
  0094 86       [3]             PULA  
  0095 e704     [3]             STA   4,X
  0097 af0a     [2]             AIX   #10
  0099 89       [2]             PSHX  
  009a 8b       [2]             PSHH  
  009b 9efe07   [5]             LDHX  7,SP
  009e cd0000   [6]             JSR   _LADD
  00a1 95       [2]             TSX   
  00a2 af0e     [2]             AIX   #14
  00a4 cd0000   [6]             JSR   _POP32
  184:    	/* ID[14:7] */
  185:    	id <<= 8; id += m->idr.Overlap_STR.CANRIDR2STR.Byte;
  00a7 95       [2]             TSX   
  00a8 af0a     [2]             AIX   #10
  00aa a608     [2]             LDA   #8
  00ac cd0000   [6]             JSR   _LLSL
  00af cd0000   [6]             JSR   _POP32
  00b2 9efe17   [5]             LDHX  23,SP
  00b5 e602     [3]             LDA   2,X
  00b7 5f       [1]             CLRX  
  00b8 87       [2]             PSHA  
  00b9 89       [2]             PSHX  
  00ba 89       [2]             PSHX  
  00bb 89       [2]             PSHX  
  00bc 95       [2]             TSX   
  00bd 8b       [2]             PSHH  
  00be ef09     [3]             STX   9,X
  00c0 86       [3]             PULA  
  00c1 e708     [3]             STA   8,X
  00c3 af0e     [2]             AIX   #14
  00c5 89       [2]             PSHX  
  00c6 8b       [2]             PSHH  
  00c7 9efe0b   [5]             LDHX  11,SP
  00ca cd0000   [6]             JSR   _LADD
  00cd 95       [2]             TSX   
  00ce af12     [2]             AIX   #18
  00d0 cd0000   [6]             JSR   _POP32
  186:    	/* ID[6:0] RTR=0 */
  187:    	id <<= 7; id += m->idr.Overlap_STR.CANRIDR3STR.Byte >> 1;
  00d3 95       [2]             TSX   
  00d4 af0e     [2]             AIX   #14
  00d6 a607     [2]             LDA   #7
  00d8 cd0000   [6]             JSR   _LLSL
  00db cd0000   [6]             JSR   _POP32
  00de 9efe1b   [5]             LDHX  27,SP
  00e1 e603     [3]             LDA   3,X
  00e3 44       [1]             LSRA  
  00e4 5f       [1]             CLRX  
  00e5 87       [2]             PSHA  
  00e6 89       [2]             PSHX  
  00e7 89       [2]             PSHX  
  00e8 89       [2]             PSHX  
  00e9 95       [2]             TSX   
  00ea ef0d     [3]             STX   13,X
  00ec 87       [2]             PSHA  
  00ed 8b       [2]             PSHH  
  00ee 86       [3]             PULA  
  00ef e70c     [3]             STA   12,X
  00f1 86       [3]             PULA  
  00f2 af12     [2]             AIX   #18
  00f4 89       [2]             PSHX  
  00f5 8b       [2]             PSHH  
  00f6 9efe0f   [5]             LDHX  15,SP
  00f9 cd0000   [6]             JSR   _LADD
  00fc 95       [2]             TSX   
  00fd af16     [2]             AIX   #22
  00ff cd0000   [6]             JSR   _POP32
  188:    	/* ok */
  189:    	f->id = id + 0x20000000;
  0102 95       [2]             TSX   
  0103 af12     [2]             AIX   #18
  0105 cd0000   [6]             JSR   _LADD_RC
  0108 20000000         DC.L  536870912
  010c 9efe1f   [5]             LDHX  31,SP
  010f cd0000   [6]             JSR   _POP32
  0112 a712     [2]             AIS   #18
  0114          L114:   
  190:    }
  191:    /* data length */
  192:    f->dlc = m->dlr.Byte & 0x0F;
  0114 9efe0d   [5]             LDHX  13,SP
  0117 e60c     [3]             LDA   12,X
  0119 a40f     [2]             AND   #15
  011b 9efe09   [5]             LDHX  9,SP
  011e e704     [3]             STA   4,X
  193:    /* data */
  194:    f->data[0] = m->dsr[0];
  0120 9efe0d   [5]             LDHX  13,SP
  0123 e604     [3]             LDA   4,X
  0125 9efe09   [5]             LDHX  9,SP
  0128 e705     [3]             STA   5,X
  195:    f->data[1] = m->dsr[1];
  012a 9efe0d   [5]             LDHX  13,SP
  012d e605     [3]             LDA   5,X
  012f 9efe09   [5]             LDHX  9,SP
  0132 e706     [3]             STA   6,X
  196:    f->data[2] = m->dsr[2];
  0134 9efe0d   [5]             LDHX  13,SP
  0137 e606     [3]             LDA   6,X
  0139 9efe09   [5]             LDHX  9,SP
  013c e707     [3]             STA   7,X
  197:    f->data[3] = m->dsr[3];
  013e 9efe0d   [5]             LDHX  13,SP
  0141 e607     [3]             LDA   7,X
  0143 9efe09   [5]             LDHX  9,SP
  0146 e708     [3]             STA   8,X
  198:    f->data[4] = m->dsr[4];
  0148 9efe0d   [5]             LDHX  13,SP
  014b e608     [3]             LDA   8,X
  014d 9efe09   [5]             LDHX  9,SP
  0150 e709     [3]             STA   9,X
  199:    f->data[5] = m->dsr[5];
  0152 9efe0d   [5]             LDHX  13,SP
  0155 e609     [3]             LDA   9,X
  0157 9efe09   [5]             LDHX  9,SP
  015a e70a     [3]             STA   10,X
  200:    f->data[6] = m->dsr[6];
  015c 9efe0d   [5]             LDHX  13,SP
  015f e60a     [3]             LDA   10,X
  0161 9efe09   [5]             LDHX  9,SP
  0164 e70b     [3]             STA   11,X
  201:    f->data[7] = m->dsr[7];
  0166 9efe0d   [5]             LDHX  13,SP
  0169 e60b     [3]             LDA   11,X
  016b 9efe09   [5]             LDHX  9,SP
  016e e70c     [3]             STA   12,X
  202:    /* time stamp */
  203:    f->ts = m->tsr.Word;
  0170 9efe0d   [5]             LDHX  13,SP
  0173 9ece0e   [5]             LDHX  14,X
  0176 9f       [1]             TXA   
  0177 8b       [2]             PSHH  
  0178 9efe0a   [5]             LDHX  10,SP
  017b e70e     [3]             STA   14,X
  017d 86       [3]             PULA  
  017e e70d     [3]             STA   13,X
  204:  
  205:  }
  0180 a70a     [2]             AIS   #10
  0182 81       [6]             RTS   
  0183          L183:   
  0183 a603     [2]             LDA   #3
  0185 cd0000   [6]             JSR   _LLSL
  0188 cd0000   [6]             JSR   _POP32
  018b 9efe0f   [5]             LDHX  15,SP
  018e 81       [6]             RTS   
  206:  
