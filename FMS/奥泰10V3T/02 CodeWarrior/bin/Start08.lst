ANSI-C/cC++ Compiler for HC08 V-5.0.32 Build 9279, Oct  7 2009

    1:  /******************************************************************************
    2:    FILE        : start08.c
    3:    PURPOSE     : 68HC08 standard startup code
    4:    LANGUAGE    : ANSI-C / INLINE ASSEMBLER
    5:    ----------------------------------------------------------------------------
    6:    HISTORY
    7:      22 oct 93         Created.
    8:      04/17/97          Also C++ constructors called in Init().
    9:   ******************************************************************************/
   10:  
   11:  /**********************************************************************/
   12:  /* NOTE:                                                              */
   13:  /* This version of the startup code assumes that main                 */
   14:  /* does never return (saving the 2 byte return address of _Startup on */
   15:  /* the stack).                                                        */
   16:  /**********************************************************************/
   17:  
   18:  #define __NO_FLAGS_OFFSET   /* we do not need the flags field in the startup data descriptor */
   19:  #define __NO_MAIN_OFFSET    /* we do not need the main field in the startup data descriptor */
   20:  
   21:  #include <start08.h>
   22:  
   23:  #ifdef __cplusplus
   24:  #define __EXTERN_C  extern "C"
   25:  #else
   26:  #define __EXTERN_C
   27:  #endif
   28:  
   29:  __EXTERN_C extern void main(void); /* prototype of main function */
   30:  
   31:  #include "non_bank.sgm"
   32:  
   33:  
   34:  /***************************************************************************/
   35:  /* Macros to control how the startup code handles the COP:                 */
   36:  /* #define _DO_FEED_COP_   : do feed the COP                               */
   37:  /* Without defining any of these, the startup code does NOT handle the COP */
   38:  /***************************************************************************/
   39:  /* __ONLY_INIT_SP define:                                                  */
   40:  /* This define selects an shorter version of the startup code              */
   41:  /* which only loads the stack pointer and directly afterwards calls        */
   42:  /* main. This version does however NOT initialize global variables         */
   43:  /* (so this version is not ANSI compliant!).                               */
   44:  /***************************************************************************/
   45:  
   46:  #if defined(_DO_FEED_COP_)
   47:  #define __FEED_COP_IN_HLI()  } _FEED_COP(); __asm {
   48:  #else
   49:  #define __FEED_COP_IN_HLI() /* do nothing */
   50:  #endif
   51:  
   52:  #ifndef __ONLY_INIT_SP
   53:  
   54:  #pragma DATA_SEG FAR _STARTUP
   55:  struct _tagStartup _startupData;    /* read-only:
   56:                                       _startupData is allocated in ROM and
   57:                                       initialized by the linker */
   58:  
   59:  #pragma MESSAGE DISABLE C20001 /* Warning C20001: Different value of stack pointer depending on control-flow */
   60:  /* the function _COPY_L releases some bytes from the stack internally */
   61:  
   62:  #if defined(__OPTIMIZE_FOR_SIZE__) || defined(_DO_FEED_COP_)
   63:  #pragma NO_ENTRY
   64:  #pragma NO_EXIT
   65:  #pragma NO_FRAME
   66:  /*lint -esym(528, loadByte) inhibit warning about unreferenced loadByte function */
   67:  static void near loadByte(void) {

Function: loadByte
Source  : C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\Sources\Start08.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\06 Platform;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\04 Modules;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\07 Application;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\05 Devices;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\Start08.c.o" -WmsgSd20001

   68:    asm {
   69:               PSHH
  0000 8b       [2]             PSHH  
   70:               PSHX
  0001 89       [2]             PSHX  
   71:  #ifdef __HCS08__
   72:               LDHX    5,SP
  0002 9efe05   [5]             LDHX  5,SP
   73:               LDA     0,X
  0005 f6       [3]             LDA   ,X
   74:               AIX     #1
  0006 af01     [2]             AIX   #1
   75:               STHX    5,SP
  0008 9eff05   [5]             STHX  5,SP
   76:  #else
   77:               LDA     5,SP
   78:               PSHA
   79:               LDX     7,SP
   80:               PULH
   81:               LDA     0,X
   82:               AIX     #1
   83:               STX     6,SP
   84:               PSHH
   85:               PULX
   86:               STX     5,SP
   87:  #endif
   88:               PULX
  000b 88       [3]             PULX  
   89:               PULH
  000c 8a       [3]             PULH  
   90:               RTS
  000d 81       [6]             RTS   
   91:    }
   92:  }
   93:  #endif /* defined(__OPTIMIZE_FOR_SIZE__) || defined(_DO_FEED_COP_) */
   94:  
   95:  
   96:  #ifdef __cplusplus
   97:  static void Call_Constructors(void) {
   98:    int i;
   99:  #ifdef __ELF_OBJECT_FILE_FORMAT__
  100:    i = (int)(_startupData.nofInitBodies - 1);
  101:    while (i >= 0) {
  102:      (&_startupData.initBodies->initFunc)[i]();  /* call C++ constructors */
  103:      i--;
  104:    }
  105:  #else /* __ELF_OBJECT_FILE_FORMAT__ */
  106:    /* HIWARE object file format */
  107:    if (_startupData.mInits != NULL) {
  108:      _PFunc *fktPtr;
  109:      fktPtr = _startupData.mInits;
  110:      while(*fktPtr != NULL) {
  111:        (**fktPtr)(); /* call constructor */
  112:        fktPtr++;
  113:      }
  114:    }
  115:  #endif /* __ELF_OBJECT_FILE_FORMAT__ */
  116:  }
  117:  #endif
  118:  
  119:  /*lint -esym(752,_COPY_L)  inhibit message on function declared, but not used (it is used in HLI) */
  120:  __EXTERN_C extern void _COPY_L(void);
  121:  /* DESC:    copy very large structures (>= 256 bytes) in 16-bit address space (stack incl.)
  122:     IN:      TOS count, TOS(2) @dest, H:X @src
  123:     OUT:
  124:     WRITTEN: X,H */
  125:  #ifdef __ELF_OBJECT_FILE_FORMAT__
  126:  	#define toCopyDownBegOffs 0
  127:  #else
  128:  	#define toCopyDownBegOffs 2 /* for the hiware format, the toCopyDownBeg field is a long. Because the HC08 is big endian, we have to use an offset of 2 */
  129:  #endif
  130:  static void Init(void) {

Function: Init
Source  : C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\Sources\Start08.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\06 Platform;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\04 Modules;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\07 Application;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\05 Devices;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\Start08.c.o" -WmsgSd20001

  0000 a7fc     [2]             AIS   #-4
  131:  /* purpose:     1) zero out RAM-areas where data is allocated
  132:                  2) init run-time data
  133:                  3) copy initialization data from ROM to RAM
  134:   */
  135:    /*lint -esym(529,p,i)  inhibit warning about symbols not used: it is used in HLI below */
  136:    int i;
  137:    int *far p;
  138:  
  139:    asm {
  140:  ZeroOut:
  141:               LDA    _startupData.nofZeroOuts:1 ; // nofZeroOuts
  0002 c60001   [4]             LDA   _startupData:1
  142:               INCA
  0005 4c       [1]             INCA  
  0006 95       [2]             TSX   
  143:               STA    i:1                        ; // i is counter for number of zero outs
  0007 e701     [3]             STA   1,X
  144:               LDA    _startupData.nofZeroOuts:0 ; // nofZeroOuts
  0009 c60000   [4]             LDA   _startupData
  145:               INCA
  000c 4c       [1]             INCA  
  146:               STA    i:0
  000d f7       [2]             STA   ,X
  147:               LDHX   _startupData.pZeroOut      ; // *pZeroOut
  000e 320002   [5]             LDHX  _startupData:2
  148:               BRA    Zero_5
  0011 201f     [3]             BRA   L32 ;abs = 0032
  0013          L13:    
  149:  Zero_3:
  150:               ; // CLR    i:1 is already 0
  151:  Zero_4:
  152:               ; // { HX == _pZeroOut }
  153:               PSHX
  0013 89       [2]             PSHX  
  154:               PSHH
  0014 8b       [2]             PSHH  
  155:               ; // { nof bytes in (int)2,X }
  156:               ; // { address in (int)0,X   }
  157:               LDA    0,X
  0015 f6       [3]             LDA   ,X
  158:               PSHA
  0016 87       [2]             PSHA  
  159:               LDA    2,X
  0017 e602     [3]             LDA   2,X
  160:               INCA
  0019 4c       [1]             INCA  
  161:               STA    p                 ; // p:0 is used for high byte of byte counter
  001a 9ee706   [4]             STA   6,SP
  162:               LDA    3,X
  001d e603     [3]             LDA   3,X
  163:               LDX    1,X
  001f ee01     [3]             LDX   1,X
  164:               PULH
  0021 8a       [3]             PULH  
  165:               INCA
  0022 4c       [1]             INCA  
  166:               BRA    Zero_0
  0023 2003     [3]             BRA   L28 ;abs = 0028
  0025          L25:    
  167:  Zero_1:
  168:             ;  // CLRA   A is already 0, so we do not have to clear it
  169:  Zero_2:
  170:               CLR    0,X
  0025 7f       [4]             CLR   ,X
  171:               AIX    #1
  0026 af01     [2]             AIX   #1
  0028          L28:    
  172:               __FEED_COP_IN_HLI()     	; // it's necessary to feed the COP in the inner loop for the fast COP timeout of some derivatives
  173:  Zero_0:
  174:               DBNZA  Zero_2
  0028 4bfb     [4]             DBNZA L25 ;abs = 0025
  175:  Zero_6:
  176:               DBNZ   p, Zero_1
  002a 9e6b05f7 [8]             DBNZ  5,SP,L25 ;abs = 0025
  177:               PULH
  002e 8a       [3]             PULH  
  178:               PULX                     ; // restore *pZeroOut
  002f 88       [3]             PULX  
  179:               AIX    #4                ; // advance *pZeroOut
  0030 af04     [2]             AIX   #4
  0032          L32:    
  180:  Zero_5:
  181:               DBNZ   i:1, Zero_4
  0032 9e6b02dd [8]             DBNZ  2,SP,L13 ;abs = 0013
  182:               DBNZ   i:0, Zero_3
  0036 9e6b01d9 [8]             DBNZ  1,SP,L13 ;abs = 0013
  183:  
  184:  CopyDown:
  185:  
  186:    }
  187:  
  188:    /* copy down */
  189:    /* _startupData.toCopyDownBeg  --->  {nof(16) dstAddr(16) {bytes(8)}^nof} Zero(16) */
  190:  #if defined(__OPTIMIZE_FOR_SIZE__) || defined(_DO_FEED_COP_) /* for now: only -os version supports _DO_FEED_COP_ */
  191:    asm {
  192:  #ifdef __HCS08__
  193:               LDHX   _startupData.toCopyDownBeg:toCopyDownBegOffs
  003a 320004   [5]             LDHX  _startupData:4
  194:               PSHX
  003d 89       [2]             PSHX  
  195:               PSHH
  003e 8b       [2]             PSHH  
  003f          L3F:    
  196:  #else
  197:               LDA    _startupData.toCopyDownBeg:(1+toCopyDownBegOffs)
  198:               PSHA
  199:               LDA    _startupData.toCopyDownBeg:(0+toCopyDownBegOffs)
  200:               PSHA
  201:  #endif
  202:  Loop0:
  203:               JSR    loadByte          ; // load high byte counter
  003f ad00     [5]             BSR   loadByte
  204:               TAX                      ; // save for compare
  0041 97       [1]             TAX   
  205:               INCA
  0042 4c       [1]             INCA  
  206:               STA    i
  0043 9ee703   [4]             STA   3,SP
  207:               JSR    loadByte          ; // load low byte counter
  0046 ad00     [5]             BSR   loadByte
  208:               INCA
  0048 4c       [1]             INCA  
  209:               STA    i:1
  0049 9ee704   [4]             STA   4,SP
  210:               DECA
  004c 4a       [1]             DECA  
  211:               BNE    notfinished
  004d 2603     [3]             BNE   L52 ;abs = 0052
  212:               CBEQX  #0, finished
  004f 510018   [4]             CBEQX #0,L6A ;abs = 006a
  0052          L52:    
  213:  notfinished:
  214:  
  215:               JSR    loadByte          ; // load high byte ptr
  0052 ad00     [5]             BSR   loadByte
  216:               PSHA
  0054 87       [2]             PSHA  
  217:               PULH
  0055 8a       [3]             PULH  
  218:               JSR    loadByte          ; // load low byte ptr
  0056 ad00     [5]             BSR   loadByte
  219:               TAX                      ; // HX is now destination pointer
  0058 97       [1]             TAX   
  220:               BRA    Loop1
  0059 2005     [3]             BRA   L60 ;abs = 0060
  005b          L5B:    
  221:  Loop3:
  222:  Loop2:
  223:               __FEED_COP_IN_HLI()
  224:               JSR    loadByte          ; // load data byte
  005b ad00     [5]             BSR   loadByte
  225:               STA    0,X
  005d f7       [2]             STA   ,X
  226:               AIX    #1
  005e af01     [2]             AIX   #1
  0060          L60:    
  227:  Loop1:
  228:               DBNZ   i:1, Loop2
  0060 9e6b04f7 [8]             DBNZ  4,SP,L5B ;abs = 005b
  229:               DBNZ   i:0, Loop3
  0064 9e6b03f3 [8]             DBNZ  3,SP,L5B ;abs = 005b
  230:               BRA    Loop0
  0068 20d5     [3]             BRA   L3F ;abs = 003f
  006a          L6A:    
  231:  
  232:  finished:
  233:               AIS #2
  234:      }
  235:  #else /*defined(__OPTIMIZE_FOR_SIZE__) || defined(_DO_FEED_COP_) */
  236:    /* time optimized asm version. */
  237:    asm {
  238:  #ifdef __HCS08__
  239:               LDHX   _startupData.toCopyDownBeg:toCopyDownBegOffs
  240:  #else
  241:               LDX    _startupData.toCopyDownBeg:(0+toCopyDownBegOffs)
  242:               PSHX
  243:               PULH
  244:               LDX    _startupData.toCopyDownBeg:(1+toCopyDownBegOffs)
  245:  #endif
  246:  next:
  247:               LDA   0,X                ; // list is terminated by 2 zero bytes
  248:               ORA   1,X
  249:               BEQ   copydone
  250:               PSHX                     ; // store current position
  251:               PSHH
  252:               LDA   3,X                ; // psh dest low
  253:               PSHA
  254:               LDA   2,X                ; // psh dest high
  255:               PSHA
  256:               LDA   1,X                ; // psh cnt low
  257:               PSHA
  258:               LDA   0,X                ; // psh cnt high
  259:               PSHA
  260:               AIX   #4
  261:               JSR   _COPY_L            ; // copy one block
  262:               PULH
  263:               PULX
  264:               TXA
  265:               ADD   1,X                ; // add low
  266:               PSHA
  267:               PSHH
  268:               PULA
  269:               ADC   0,X                ; // add high
  270:               PSHA
  271:               PULH
  272:               PULX
  273:               AIX   #4
  274:               BRA next
  275:  copydone:
  276:    }
  277:  #endif /* defined(__OPTIMIZE_FOR_SIZE__) || defined(_DO_FEED_COP_) */
  278:  
  279:    /* FuncInits: for C++, this are the global constructors */
  280:  #ifdef __cplusplus
  281:    Call_Constructors();
  282:  #endif /* __cplusplus */
  283:  
  284:    /* implement ROM libraries initialization here (see startup.c) */
  285:  }
  006a a706     [2]             AIS   #6
  006c 81       [6]             RTS   
  286:  #endif /* __ONLY_INIT_SP */
  287:  
  288:  
  289:  #pragma NO_EXIT
  290:  __EXTERN_C void _Startup(void) {

Function: _Startup
Source  : C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\Sources\Start08.c
Options : -AddIncl../preinc.h -Cs08 -D__NO_FLOAT__ -Env"GENPATH=C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\bin;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\src;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\lib;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\src;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\06 Platform;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\04 Modules;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\Sources;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\07 Application;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\05 Devices;C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"LIBPATH=D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\hc08c\device\asm_include;D:\Program Files\Freescale\CodeWarrior for Microcontrollers V6.3\lib\HC08c\include" -Env"OBJPATH=C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\bin" -Env"TEXTPATH=C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\bin" -Lasm=%n.lst -Ms -ObjN="C:\Users\Administrator\Desktop\新建文件夹 (2)\奥泰10V3T\02 CodeWarrior\mc9s08dz60_Data\Standard\ObjectCode\Start08.c.o" -WmsgSd20001

  291:  /* set the reset vector to _Startup in the linker parameter file (*.prm):
  292:      'VECTOR 0 _Startup'
  293:  
  294:      purpose:    1)  initialize the stack
  295:                  2)  initialize run-time, ...
  296:                      initialize the RAM, copy down init data, etc (Init)
  297:                  3)  call main;
  298:      called from: _PRESTART-code generated by the Linker
  299:  */
  300:    INIT_SP_FROM_STARTUP_DESC();
  0000 450000   [3]             LDHX  @__SEG_END_SSTACK
  0003 94       [2]             TXS   
  301:  #ifndef  __ONLY_INIT_SP
  302:    Init();
  0004 ad00     [5]             BSR   Init
  303:  #endif
  304:  #ifndef __BANKED__
  305:    __asm JMP main; /* with a C style main(); we would push the return address on the stack wasting 2 RAM bytes */
  0006 cc0000   [4]             JMP   main
  306:  #else
  307:    __asm CALL main;
  308:  #endif
  309:  }
  310:  
